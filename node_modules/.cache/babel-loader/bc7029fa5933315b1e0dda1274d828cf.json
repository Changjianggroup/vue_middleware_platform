{"remainingRequest":"/data/software/vue_middleware_platform/node_modules/thread-loader/dist/cjs.js!/data/software/vue_middleware_platform/node_modules/babel-loader/lib/index.js!/data/software/vue_middleware_platform/node_modules/cache-loader/dist/cjs.js??ref--0-0!/data/software/vue_middleware_platform/node_modules/vue-loader/lib/index.js??vue-loader-options!/data/software/vue_middleware_platform/src/components/page/Dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/data/software/vue_middleware_platform/src/components/page/Dashboard.vue","mtime":1609055205411},{"path":"/data/software/vue_middleware_platform/node_modules/cache-loader/dist/cjs.js","mtime":1609060265603},{"path":"/data/software/vue_middleware_platform/node_modules/thread-loader/dist/cjs.js","mtime":1609060265532},{"path":"/data/software/vue_middleware_platform/node_modules/babel-loader/lib/index.js","mtime":1609060265632},{"path":"/data/software/vue_middleware_platform/node_modules/cache-loader/dist/cjs.js","mtime":1609060265603},{"path":"/data/software/vue_middleware_platform/node_modules/vue-loader/lib/index.js","mtime":1609060265552}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.define-property\";\nimport \"core-js/modules/es6.object.define-properties\";\nimport \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.array.filter\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/data/software/vue_middleware_platform/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getServerList } from '@/api/redis_server';\nimport { getUserList } from '@/api/users';\nimport { getGroupList } from '@/api/groups';\nimport { getRabbitmqServerList } from '@/api/rabbitmq_server';\nimport { mapGetters } from 'vuex';\nexport default {\n  name: 'dashboard',\n  data: function data() {\n    return {\n      redisClusterNum: '',\n      rabbitmqClusterNum: '',\n      userNum: '',\n      groupNum: ''\n    };\n  },\n  // components: {\n  // },\n  computed: _objectSpread({}, mapGetters(['sidebar', 'avatar', 'username'])),\n  created: function created() {\n    this.fetchData();\n  },\n  // activated() {\n  //     this.handleListener();\n  // },\n  // deactivated() {\n  //     window.removeEventListener('resize', this.renderChart);\n  //     bus.$off('collapse', this.handleBus);\n  // },\n  methods: {\n    fetchData: function fetchData() {\n      var _this = this;\n\n      getServerList().then( // 获取服务器个数\n      function (res) {\n        _this.redisClusterNum = res.count;\n      });\n      getUserList(this.params).then( // 获取用户数\n      function (res) {\n        _this.userNum = res.count;\n      });\n      getGroupList(this.params).then( // 获取所有用户组\n      function (res) {\n        _this.groupNum = res.count;\n      });\n      getRabbitmqServerList(this.params).then(function (res) {\n        _this.rabbitmqClusterNum = res.count;\n      });\n    }\n  }\n};",null]}