{"remainingRequest":"/data/software/vue_middleware_platform/node_modules/thread-loader/dist/cjs.js!/data/software/vue_middleware_platform/node_modules/babel-loader/lib/index.js!/data/software/vue_middleware_platform/node_modules/cache-loader/dist/cjs.js??ref--0-0!/data/software/vue_middleware_platform/node_modules/vue-loader/lib/index.js??vue-loader-options!/data/software/vue_middleware_platform/src/components/page/rabbitmqManagement/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/data/software/vue_middleware_platform/src/components/page/rabbitmqManagement/index.vue","mtime":1609123457430},{"path":"/data/software/vue_middleware_platform/node_modules/cache-loader/dist/cjs.js","mtime":1609060265603},{"path":"/data/software/vue_middleware_platform/node_modules/thread-loader/dist/cjs.js","mtime":1609060265532},{"path":"/data/software/vue_middleware_platform/node_modules/babel-loader/lib/index.js","mtime":1609060265632},{"path":"/data/software/vue_middleware_platform/node_modules/cache-loader/dist/cjs.js","mtime":1609060265603},{"path":"/data/software/vue_middleware_platform/node_modules/vue-loader/lib/index.js","mtime":1609060265552}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.for-each\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getRabbitmqServerList, createRabbitmqServer, deleteRabbitmqServer, updateRabbitmqServer } from '@/api/rabbitmq_server';\nimport ServerList from \"./list\";\nimport ServerForm from \"./form\";\nexport default {\n  name: 'rabbitmqManagement',\n  components: {\n    ServerList: ServerList,\n    ServerForm: ServerForm\n  },\n  data: function data() {\n    return {\n      serverid: '',\n      vauleUsername: '',\n      vaulePassword: '',\n      server: [],\n      multipleSelection: [],\n      serverOption: [],\n      dialogVisibleCreate: false,\n      dialogVisibleUpdate: false,\n      updateServerInfo: {},\n      serverInfo: {},\n      // detailForm: {},\n      createString: '立即创建',\n      updateString: '立即更新',\n      totalNum: 0,\n      currentPage1: 1,\n      params: {\n        page: 1,\n        keywords: '',\n        page_size: 10\n      },\n      cluster_name_list: [],\n      cluster_name_options: []\n    };\n  },\n  created: function created() {\n    this.fetchData();\n  },\n  methods: {\n    fetchData: function fetchData() {\n      var _this = this;\n\n      getRabbitmqServerList(this.params).then( // 获取rabbitmq集群列表\n      function (res) {\n        _this.server = res.results;\n        _this.totalNum = res.count;\n      }, function (err) {\n        _this.$message({\n          type: 'error',\n          message: err\n        });\n      });\n    },\n    handleSubmitCreate: function handleSubmitCreate(value) {\n      var _this2 = this;\n\n      // 创建服务器\n      createRabbitmqServer(value).then(function () {\n        _this2.fetchData();\n\n        _this2.dialogVisibleCreate = false;\n\n        _this2.$refs.serverCreateForm.form.resetFields().catch(function (err) {});\n\n        _this2.$message({\n          type: 'success',\n          message: '创建成功'\n        });\n      }, function (error) {\n        _this2.$message({\n          type: 'error',\n          message: error\n        });\n      });\n    },\n    handleSubmitUpdate: function handleSubmitUpdate(value) {\n      var _this3 = this;\n\n      // 更新服务器\n      updateRabbitmqServer(value).then(function () {\n        _this3.fetchData();\n\n        _this3.dialogVisibleUpdate = false;\n\n        _this3.$message({\n          type: 'success',\n          message: '更新成功'\n        });\n      }, function (err) {\n        _this3.$message({\n          type: 'error',\n          message: err.response\n        });\n      });\n    },\n    handleDialogCreate: function handleDialogCreate() {\n      // 弹出服务器新增弹框\n      this.dialogVisibleCreate = true;\n    },\n    handleDialogUpdate: function handleDialogUpdate(server_obj) {\n      this.serverInfo = server_obj;\n      this.dialogVisibleUpdate = true;\n    },\n    closedUpdateDialog: function closedUpdateDialog() {// this.reset = false\n    },\n    handleDeleteServer: function handleDeleteServer(id) {\n      var _this4 = this;\n\n      // 删除Server\n      deleteRabbitmqServer(id).then(function () {\n        if (_this4.totalNum % _this4.params.page_size === 1) {\n          _this4.params.page = _this4.params.page - 1;\n        }\n\n        _this4.fetchData();\n\n        _this4.$message({\n          type: 'success',\n          message: '删除成功!'\n        });\n      }, function (err) {\n        _this4.$message({\n          type: 'error',\n          message: err\n        });\n      });\n    },\n    handleOpertionServer: function handleOpertionServer(params) {\n      // 打开rabbitmq-management页面进行操作\n      window.open(params.url, '_blank');\n    },\n    handleCopyUsername: function handleCopyUsername(username) {\n      var input = document.createElement('input'); // 新增一个input\n\n      input.style.position = 'relative'; // 将它隐藏（注意不能使用display或者visibility，否则粘贴不上）\n\n      input.style.zIndex = '-9';\n      document.body.appendChild(input); // 追加\n\n      input.value = username; // 设置文本框的内容\n\n      input.select(); // 选中文本\n\n      document.execCommand('copy'); // 执行浏览器复制命令\n\n      document.body.removeChild(input);\n      this.$message({\n        type: 'success',\n        message: '账户复制成功'\n      });\n    },\n    handleCopyPassword: function handleCopyPassword(password) {\n      var input = document.createElement('input'); // 新增一个input\n\n      input.style.position = 'relative'; // 将它隐藏（注意不能使用display或者visibility，否则粘贴不上）\n\n      input.style.zIndex = '-9';\n      document.body.appendChild(input); // 追加\n\n      input.value = password; // 设置文本框的内容\n\n      input.select(); // 选中文本\n\n      document.execCommand('copy'); // 执行浏览器复制命令\n\n      document.body.removeChild(input);\n      this.$message({\n        type: 'success',\n        message: '密码复制成功'\n      });\n    },\n    handleCurrentChange: function handleCurrentChange(val) {\n      // 分页\n      this.params.page = val;\n      this.fetchData();\n    },\n    handleSizeChange: function handleSizeChange(val) {\n      // 改变分页大小\n      this.params.page_size = val;\n      this.fetchData();\n    },\n    handleCreateCancel: function handleCreateCancel() {\n      // 取消创建\n      this.dialogVisibleCreate = false;\n      this.fetchData();\n    },\n    handleUpdateCancel: function handleUpdateCancel() {\n      // 取消更新\n      this.dialogVisibleUpdate = false;\n      this.fetchData();\n    },\n    handleFilter: function handleFilter() {\n      // 搜索\n      this.params.page = 1;\n      this.fetchData();\n    },\n    handleSelectionChange: function handleSelectionChange(val) {\n      // 获取表格多选的值\n      this.multipleSelection = val;\n    },\n    handleMultiDeleteServer: function handleMultiDeleteServer() {\n      var _this5 = this;\n\n      // 批量删除\n      if ((this.totalNum - this.multipleSelection.length) % this.params.page_size === 0) {\n        this.params.page = this.params.page - 1;\n      }\n\n      this.multipleSelection.forEach(function (item) {\n        deleteServer(item.id).then(function () {\n          _this5.fetchData();\n\n          _this5.$message({\n            type: 'success',\n            message: '删除成功!'\n          });\n        });\n      }, function (err) {\n        _this5.$message({\n          type: 'error',\n          message: err\n        });\n      });\n      this.$refs.serverListTable.$refs.listTable.clearSelection();\n    }\n  }\n};",null]}