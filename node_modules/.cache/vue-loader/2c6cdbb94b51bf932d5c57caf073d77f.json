{"remainingRequest":"/data/software/vue_middleware_platform/node_modules/vue-loader/lib/index.js??vue-loader-options!/data/software/vue_middleware_platform/src/components/page/perm/users/update-user-form.vue?vue&type=script&lang=js&","dependencies":[{"path":"/data/software/vue_middleware_platform/src/components/page/perm/users/update-user-form.vue","mtime":1610806194804},{"path":"/data/software/vue_middleware_platform/node_modules/cache-loader/dist/cjs.js","mtime":1609060265603},{"path":"/data/software/vue_middleware_platform/node_modules/thread-loader/dist/cjs.js","mtime":1609060265532},{"path":"/data/software/vue_middleware_platform/node_modules/babel-loader/lib/index.js","mtime":1609060265632},{"path":"/data/software/vue_middleware_platform/node_modules/cache-loader/dist/cjs.js","mtime":1609060265603},{"path":"/data/software/vue_middleware_platform/node_modules/vue-loader/lib/index.js","mtime":1609060265552}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { validAlphabetsSpecific } from '@/utils/validate'\n\nexport default {\n  name: 'UserForm',\n  props: {\n    form: {\n      type: Object,\n      default: function() {\n        return {\n          username: '',\n          name: '',\n          email: '',\n          phone: '',\n          password: ''\n        }\n      }\n    },\n    value: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    var validateInput = (rule, value, callback) => {\n      if (!validAlphabetsSpecific(value)) {\n        callback(new Error('用户名只允许包括汉字，数字，字母及@.+-_'))\n      } else {\n        callback()\n      }\n    }\n    return {\n      rules: {\n        username: [\n          { required: true, message: '请输入用户名', trigger: 'blur' },\n          { validator: validateInput, trigger: ['change', 'blur'] },\n          { max: 150, message: '长度不能超过150个字符', trigger: 'blur' }\n        ],\n        email: [\n          { type: 'email', message: '请输入正确的邮箱地址', trigger: 'blur' }\n        ],\n      }\n    }\n  },\n  methods: {\n    submitForm() {\n      this.$refs.form.validate((valid) => {\n        if (valid) {\n          this.$emit('submit', this.form)\n        } else {\n          return\n        }\n      })\n    },\n    cancelForm() {\n      this.$emit('cancel')\n    }\n  }\n}\n",null]}