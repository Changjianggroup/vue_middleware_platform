{"remainingRequest":"/data/software/vue_middleware_platform/node_modules/vue-loader/lib/index.js??vue-loader-options!/data/software/vue_middleware_platform/src/components/page/redisOperation/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/data/software/vue_middleware_platform/src/components/page/redisOperation/index.vue","mtime":1607932802580},{"path":"/data/software/vue_middleware_platform/node_modules/babel-loader/lib/index.js","mtime":1607932810881},{"path":"/data/software/vue_middleware_platform/node_modules/cache-loader/dist/cjs.js","mtime":1607932810847},{"path":"/data/software/vue_middleware_platform/node_modules/vue-loader/lib/index.js","mtime":1607932810803}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getServerList, showALLKey, showDBSize, getKey, getKeyTTL, delKey, createKey, clusterNode, clusterInfo } from '@/api/redis_server'\n// import { getSupplierList } from '@/api/supplier'\n// import { getManufactoryList } from '@/api/manufactory'\n// import { getIdcList } from '@/api/idc'\n\nexport default {\n  name: 'redisOperation',\n  data() {\n    return {\n      cluster_options: [],\n      value_id: '',\n      value_cluster_name: '',\n      value_hosts: '',\n      cluster_list: [],\n      loading: false,\n      result_code: '',\n      result_msg: '',\n      totalNum: 0,\n      server: [],\n      input_key_for_value: '',\n      input_key_for_ttl: '',\n      input_key_for_del: '',\n      input_key_for_create: '',\n      input_value_for_create: '',\n      selected_server_id: null,\n      params: {\n        page: 1,\n        keywords: '',\n        page_size: 10\n      },\n      kwargs: {}\n    }\n  },\n  created() {\n    this.fetchData()\n    this.value_id = this.$store.state.redis.server_id\n  },\n  methods: {\n    fetchData() {\n      getServerList(this.params).then(\n          // 获取redis集群列表\n          res => {\n            this.server = res.results\n            // console.log(this.server)\n            this.totalNum = res.count\n            //\n            this.cluster_list = this.server.map(item => {\n              return { id: `${item.id}`, hosts: `${item.hosts}`, cluster_name: `${item.cluster_name}` }\n            })\n            // console.log(this.cluster_name_list)\n\n            if (this.$store.state.redis.server_id !== 0) {\n              // this.value = this.$store.state.redis.server_id\n              this.value_cluster_name = this.cluster_list.find(item => {\n                if (parseInt(item.id) === this.$store.state.redis.server_id) {\n                  return item\n                }\n              }).cluster_name\n              this.value_hosts = this.cluster_list.find(item => {\n                if (parseInt(item.id) === this.$store.state.redis.server_id) {\n                  return item\n                }\n              }).hosts\n            }\n          },\n          err => {\n            this.$message({\n              type: 'error',\n              message: err\n            })\n          }\n      )\n    },\n    remoteSearchRedisClusterName(query) {\n      this.cluster_list = this.server.map(item => {\n        return { id: `${item.id}`, hosts: `${item.hosts}`, cluster_name: `${item.cluster_name}` }\n      })\n      if (query !== '') {\n        this.loading = true\n        setTimeout(() => {\n          this.loading = false\n          this.cluster_options = this.cluster_list.filter(item => {\n            return item.cluster_name.toLowerCase()\n                .indexOf(query.toLowerCase()) > -1\n          })\n        }, 200)\n      } else {\n        this.cluster_options = []\n      }\n    },\n    remoteSearchRedisClusterHosts(query) {\n      this.cluster_list = this.server.map(item => {\n        return { id: `${item.id}`, hosts: `${item.hosts}`, cluster_name: `${item.cluster_name}` }\n      })\n      if (query !== '') {\n        this.loading = true\n        setTimeout(() => {\n          this.loading = false\n          this.cluster_options = this.cluster_list.filter(item => {\n            return item.hosts.toLowerCase()\n                .indexOf(query.toLowerCase()) > -1\n          })\n        }, 200)\n      } else {\n        this.cluster_options = []\n      }\n    },\n    setSelectedClusterName() {\n      this.value_cluster_name = this.cluster_options.find(item => {\n        if (item.hosts === this.value_hosts) {\n          console.log(item.cluster_name)\n          return item\n        }\n      }).cluster_name\n    },\n    setSelectedHosts() {\n      // this.cluster_options = this.server.map(i => {\n      //   return { value: `${i.id}`, label: `${i.cluster_name}` }\n      // })\n      this.value_hosts = this.cluster_options.find(item => {\n        if (item.cluster_name === this.value_cluster_name) {\n          return item\n        }\n      }).hosts\n    },\n    handlershowALLKey() {\n      this.value_id = this.cluster_list.find(item => {\n        if (item.cluster_name === this.value_cluster_name) {\n          return item\n        }\n      }).id\n      showALLKey(this.value_id).then(\n          // 获取redis集群列表\n          res => {\n            let str_key = '\\n'\n            for (var i in res.msg) {\n              str_key = str_key + res.msg[i] + '\\n'\n            }\n            this.result_code = '返回code：' + res.code\n            this.result_msg = '返回结果：' + str_key\n          },\n          err => {\n            this.$message({\n              type: 'error',\n              message: err\n            })\n          }\n      )\n    },\n    handlershowDBSize() {\n      const obj_item = this.cluster_list.find(item => {\n        if (item.cluster_name === this.value_cluster_name) {\n          return item\n        }\n      })\n      this.value_id = obj_item.id\n      showDBSize(this.value_id).then(\n          // 获取redis集群列表\n          res => {\n            let msg = \"\\n\"\n            if ( res.msg instanceof Object) {\n              for(var key in  res.msg){\n                msg = msg + key + \":\" + '\\n'\n                msg = msg + res.msg[key] + '\\n'\n              }\n              // msg = JSON.stringify(res.msg).toString()\n            } else {\n              msg = res.msg\n            }\n            this.result_code = '返回code：' + res.code\n            this.result_msg = '返回结果：' + msg\n          },\n          err => {\n            this.$message({\n              type: 'error',\n              message: err\n            })\n          }\n      )\n    },\n    handleGetKey() {\n      this.value_id = this.cluster_list.find(item => {\n        if (item.cluster_name === this.value_cluster_name) {\n          return item\n        }\n      }).id\n      this.kwargs.id = this.value_id\n      this.kwargs.key = this.input_key_for_value\n      getKey(this.kwargs).then(\n          // 获取redis集群列表\n          res => {\n            this.result_code = '返回code：' + res.code\n            this.result_msg = '返回结果：\\n' + res.msg\n          },\n          err => {\n            this.$message({\n              type: 'error',\n              message: err\n            })\n          }\n      )\n    },\n    handleGetKeyTTL() {\n      this.value_id = this.cluster_list.find(item => {\n        if (item.cluster_name === this.value_cluster_name) {\n          return item\n        }\n      }).id\n      this.kwargs.id = this.value_id\n      this.kwargs.key = this.input_key_for_ttl\n      getKeyTTL(this.kwargs).then(\n          // 获取redis集群列表\n          res => {\n            this.result_code = '返回code：' + res.code\n            this.result_msg = '返回结果：' + res.msg\n          },\n          err => {\n            this.$message({\n              type: 'error',\n              message: err\n            })\n          }\n      )\n    },\n    handleDelKey() {\n      this.value_id = this.cluster_list.find(item => {\n        if (item.cluster_name === this.value_cluster_name) {\n          return item\n        }\n      }).id\n      this.kwargs.id = this.value_id\n      this.kwargs.key = this.input_key_for_del\n      delKey(this.kwargs).then(\n          // 获取redis集群列表\n          res => {\n            this.result_code = '返回code：' + res.code\n            if (parseInt(res.msg) === 1) {\n              this.result_msg = '返回结果：成功删除'\n            }\n            if (parseInt(res.msg) === 0) {\n              this.result_msg = '返回结果：不存在该键'\n            }\n            if (parseInt(res.msg) > 1) {\n              this.result_msg = '返回结果：成功删除' + res.msg + '个键'\n            }\n          },\n          err => {\n            this.$message({\n              type: 'error',\n              message: err\n            })\n          }\n      )\n    },\n    handleCreateKey() {\n      this.value_id = this.cluster_list.find(item => {\n        if (item.cluster_name === this.value_cluster_name) {\n          return item\n        }\n      }).id\n      this.kwargs.id = this.value_id\n      this.kwargs.key = this.input_key_for_create\n      this.kwargs.value = this.input_value_for_create\n      createKey(this.kwargs).then(\n          // 获取redis集群列表\n          res => {\n            console.log(res)\n            this.result_code = '返回结果：' + res\n            this.result_msg = ''\n          },\n          err => {\n            this.$message({\n              type: 'error',\n              message: err\n            })\n          }\n      )\n    },\n    handlershowClusterInfo() {\n      this.value_id = this.cluster_list.find(item => {\n        if (item.cluster_name === this.value_cluster_name) {\n          return item\n        }\n      }).id\n      clusterInfo(this.value_id).then(\n              // 获取cluster info\n              res => {\n                let msg = \"\\n\"\n                if ( res.msg instanceof Object) {\n                  for(var key in  res.msg){\n                    msg = msg + key + \":\" + '\\n'\n                    msg = msg + res.msg[key] + '\\n'\n                  }\n                  // msg = JSON.stringify(res.msg).toString()\n                } else {\n                  msg = res.msg\n                }\n                this.result_code = '返回code：' + res.code\n                this.result_msg = '返回结果：' + msg\n              },\n              err => {\n                this.$message({\n                  type: 'error',\n                  message: err\n                })\n              }\n      )\n    },\n    handlershowClusterNode() {\n      this.value_id = this.cluster_list.find(item => {\n        if (item.cluster_name === this.value_cluster_name) {\n          return item\n        }\n      }).id\n      clusterNode(this.value_id).then(\n              // 获取cluster info\n              res => {\n                let msg = \"\\n\"\n                if ( res.msg instanceof Object) {\n                  for(var key in  res.msg){\n                    msg = msg + key + \":\" + '\\n'\n                    msg = msg + res.msg[key] + '\\n'\n                  }\n                  // msg = JSON.stringify(res.msg).toString()\n                } else {\n                  msg = res.msg\n                }\n                this.result_code = '返回code：' + res.code\n                this.result_msg = '返回结果：' + msg\n              },\n              err => {\n                this.$message({\n                  type: 'error',\n                  message: err\n                })\n              }\n      )\n    }\n  }\n}\n",null]}